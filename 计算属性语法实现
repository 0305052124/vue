<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>vue计算属性语法实现</title>
    <script src="../js/vue.js"></script>
</head>
<body>
<div id="root">
    <!--
		计算属性 1.定义：要用的属性不存在，要通过已有属性计算得来。
				2.原理：底层借助了Objcet.defineproperty方法提供的getter和setter。
				3.get函数什么时候执行？(1).初次读取时会执行一次。(2).当依赖的数据发生改变时会被再次调用。
				4.优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便。
				5.备注：1.计算属性最终会出现在vm上，直接读取使用即可。
						2.如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变。
		 -->
    <!--v-model双向绑定-->
    姓:<input type="text" v-model="firstName"/><br/><br/>
    名:<input type="text" v-model="lastName"/><br/><br/>
    测试:<input type="text" v-model="x"/><br/><br/>
    全名: <span>{{ fullName }}</span>
</div>
<script type="text/javascript">
    const vm = new Vue({
        el: '#root',
        data: {
            //data里的属性
            firstName: '张',
            lastName: '三',
            x:'你好'
        },
        //计算属性--> 旧属性加工
        /**
        * computed计算属性：
        * 1、定义：要用的属性不存在，通过已有的属性计算得来
        * 2、原理：底层借助了Object.defineProperty()方法提供的getter和setter
        * 3、get函数什么时候执行？ 
        *     a.初次读取计算属性时会执行一次 
        *     b.所依赖的数据(data中的属性)发生变化时会再次执行，不改变的话直接读缓存
        * 4、优势：methods没有缓存，读几次就调用几次无论要用的数据是否发生变化
        * 5、备注：
        *      a.计算属性算完之后直接丢到了viewModel实例对象身上,直接读取使用即可
        *      b.如果计算属性要被修改，那必须写set函数去响应修改，且set要引起计算时依赖的数据发生改变
        *      c.如果计算属性确定不考虑修改，可以使用计算属性的简写形式
        *  @returns {string}
        */
        computed: {
            //完整写法
            // fullName: { 
            //     //注意vm._data是不存在计算属性的 
            //     get(){
            //         //get的作用，当读取fullName时get就会被调用，且返回值就做为fullName的值 
            //         //此时get函数中的this指向是vm
            //         console.log('get被调用了', this);
            //         return this.firstName + '-' + this.lastName
            //     },
            //     /**
            //      * set什么时候调用
            //      *   1.当fullName被修改时
            //      * @param value
            //      */
            //     set(value){
            //         //修改计算属性所依赖的普通属性(放在data里面的)
            //         //this === vm
            //         const [ firstName, lastName ] = value.split('-');
            //         this.firstName = firstName;
            //         this.lastName = lastName; //依赖属性发生改变之后,计算属性自动改变
            //     }
            // } 
            ////简写形式
            //前提:计算属性只考虑读取不考虑修改 set丢了
            //简写计算书写为一个函数(这个函数当成getter使用), 注意不要写箭头函数
            //执行完getter之后，vm直接保存返回的数据为fullName属性的属性值,此时vm.fullName不是函数而是一个确切的计算值
            fullName(){
                console.log('get被调用了')
                return this.firstName + '-' + this.lastName
                
            }
        }
    });
</script>
</body>
</html>
